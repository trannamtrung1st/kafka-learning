# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This configuration file is intended for use in ZK-based mode, where Apache ZooKeeper is required.
# See kafka.server.KafkaConfig for additional details and defaults
#

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=1

# Graceful shutdown
controlled.shutdown.enable=true
auto.leader.rebalance.enable=true

# Rack
broker.rack=local_pc

############################# Socket Server Settings #############################

# The address the socket server listens on. If not configured, the host name will be equal to the value of
# java.net.InetAddress.getCanonicalHostName(), with PLAINTEXT listener name, and port 9092.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092
#listeners=PLAINTEXT://:9092,SSL://:9093,DOCKER_INTERNAL://:29092,DOCKER_INTERNAL_SSL://:29093
listeners=SASL_SSL://:9093,DOCKER_INTERNAL://:29093

# Listener name, hostname and port the broker will advertise to clients.
# If not set, it uses the value for "listeners".
advertised.listeners=SASL_SSL://localhost:9093,DOCKER_INTERNAL://:29093

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
listener.security.protocol.map=SASL_SSL:SASL_SSL,DOCKER_INTERNAL:SASL_SSL

# Use inter.broker.listener.name for more flexible control in case of multi-brokers
# security.inter.broker.protocol=SASL_SSL
inter.broker.listener.name=DOCKER_INTERNAL

sasl.mechanism.inter.broker.protocol=PLAIN
sasl.enabled.mechanisms=PLAIN

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs=/kafka-data

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
# offsets.topic.replication.factor=1

# Replication factor settings
default.replication.factor=3
offsets.topic.replication.factor=3
config.storage.replication.factor=3
status.storage.replication.factor=3
offset.storage.replication.factor=3

# Broker/Topic level in-sync replicas settings
min.insync.replicas=2

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
# log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
# log.retention.check.interval.ms=300000

# Retention settings
# This is broker level, we may want to override retention at topic-level
# log.retention.bytes=
log.retention.hours=1
log.cleanup.policy=delete
# [DEMO] 1mb log size (default 1gb)
# log.segment.bytes=1000000
log.segment.bytes=1073741824
log.retention.check.interval.ms=15000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
# zookeeper.connect=localhost:2181
zookeeper.connect=kafka-1:2182,kafka-2:2182,kafka-3:2182

# Required to use TLS-to-ZooKeeper (default is false)
zookeeper.ssl.client.enable=true
zookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty
zookeeper.ssl.truststore.location=/kafka/certs/broker/truststore.jks
zookeeper.ssl.truststore.type=PKCS12
zookeeper.ssl.truststore.password=123456

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=18000


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=3

# SSL settings
ssl.keystore.location=/kafka/certs/broker/keystore.jks
ssl.keystore.type=PKCS12
ssl.keystore.password=123456
# only if the key is protected by password
ssl.key.password=123456

# [DEMO] should be enabled in Production
ssl.endpoint.identification.algorithm=

ssl.truststore.location=/kafka/certs/broker/truststore.jks
ssl.truststore.type=PKCS12
ssl.truststore.password=123456
ssl.client.auth=required

# ACLs
authorizer.class.name=kafka.security.authorizer.AclAuthorizer
super.users=User:broker;User:admin

# Batch settings
# [DEMO] default value, there is a topic-level config for this "max.message.bytes"
message.max.bytes=1048588

# Compression settings
# This is broker level, we may want to set compression at topic-level
# Reference: https://developer.ibm.com/articles/benefits-compression-kafka-messaging/
# compression.type=gzip

# Transaction settings
# [DEMO]
transaction.max.timeout.ms=60000
# transaction.state.log.num.partitions=50
transaction.state.log.replication.factor=3
# transaction.state.log.min.isr=2
transactional.id.expiration.ms=180000
# [DEMO]
transaction.abort.timed.out.transaction.cleanup.interval.ms=3000
transaction.remove.expired.transaction.cleanup.interval.ms=10000
# max.block.ms=60000

# Producer Transaction settings 
# transaction.timeout.ms=
# transactional.id=

# Consumer Transaction settings
# isolation.level=
